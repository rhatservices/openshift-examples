# Local variables:
# after-save-hook: org-md-export-to-markdown
# end:

* ArgoCD

  |--------------------------------------------------------------------------------|
  | :exclamation: For me ArgoCD currently only works with cluster-admin privileges |
  |--------------------------------------------------------------------------------|

** ArgoCD workaround

   There is an open issue when ArgoCD is in a single namespace:

   [[https://issues.redhat.com/browse/GITOPS-993]]

   For a workaround deploy the following role:

   #+begin_src yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: argocd-workaround993-role
rules:
- apiGroups: ["*"]
  resources: ["*"]
  verbs: ["*"]
   #+end_src

   |-----------------------------------------------------------------------------------|
   | :exclamation: Make sure you are in the correct namespace before applying the role |
   |-----------------------------------------------------------------------------------|

   and the following rolebinding:

   #+begin_src yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: argocd-workaround993-rolebinding
subjects:
- kind: ServiceAccount
  name: argocd-argocd-application-controller
roleRef:
  kind: Role
  name: argocd-workaround993-role
  apiGroup: rbac.authorization.k8s.io
   #+end_src

   |------------------------------------------------------------------------------------------|
   | :exclamation: Make sure you are in the correct namespace before applying the rolebinding |
   |------------------------------------------------------------------------------------------|

   |-----------------------------------------------------------------------------------------|
   | :exclamation: Make sure you are using the right service account name in the rolebinding |
   |-----------------------------------------------------------------------------------------|

   Then

   - Login to ArgoCD with the admin user (see below)
   - Go to settings / clusters
   - Server should be https://kubernetes.default.svc
   - Make sure the namespace is set to the namespace ArgoCD is running in

   This should be fixed with versino 1.1.2 of the GitOps operator

** Create an ArgoCD instance in your project and try to login

   First we create a new ArgoCD instance in our namespace.

   Make sure you are in the correct namespace before executing this command!

   #+begin_src sh
oc apply -f argocd.yml
   #+end_src



   Extract the admin password and the route and login to ArgoCD

   #+begin_src sh
export ARGOCD_PASSWORD=$(oc get secrets -o jsonpath="{.data['admin\.password']}" argocd-cluster |base64 -d)
export ARGOCD_ROUTE=$(oc get route -o yaml argocd-server -o jsonpath={.spec.host})
   #+end_src

   Execute

   #+begin_src
 oc get argocd argocd -o jsonpath='{.status.phase}{"\n"}'
   #+end_src

   and wait for ArgoCD to become available.

   #+begin_src
argocd  login --insecure --username admin --password "$ARGOCD_PASSWORD"  "$ARGOCD_ROUTE"
   #+end_src



   Try to list the available projects:

   #+begin_src sh
argocd proj list
   #+end_src

   ArgoCD also support SSO authentication via Keycloak, see
   https://docs.openshift.com/container-platform/4.7/cicd/gitops/configuring-sso-for-argo-cd-on-openshift.html
   for more information.

   Another method of authentication is using ArgoCD [[https://www.openshift.com/blog/openshift-authentication-integration-with-argocd][DEX]]. Be aware that
   this is *not* supported by Red Hat.

**  Deploying a simple application

  Create an example application within ArgoCD

  #+begin_src
PROJECT=$(oc project -q)
argocd app create nginx-app --project default --repo https://github.com/rhatservices/openshift-examples.git --revision main --path advanced-concepts/04_argocd/application --dest-server https://kubernetes.default.svc --dest-namespace $PROJECT
  #+end_src

  What is the state of the ArgoCD application after creating the new app?

  #+begin_src
argocd app list
argocd app get nginx-app
  #+end_src

  Can you synchronize the app?
